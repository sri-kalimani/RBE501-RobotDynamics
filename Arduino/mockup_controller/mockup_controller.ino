#include <Servo.h>

//Instantiate the servo objects
Servo J1;
Servo J2;
Servo J3;
Servo J4;
Servo J5;
Servo J6;

//Set the pins that each servo is plugged into
const int J1_pin = 2;
const int J2_pin = 3;
const int J3_pin = 4;
const int J4_pin = 5;
const int J5_pin = 6;
const int J6_pin = 7;

//Set the home config servo positions
// Array of {minValue, homePosValue, maxValue}
const int J1_pos[3] = {0, 90, 180};
const int J2_pos[3] = {40, 90, 180};
const int J3_pos[3] = {20, 120, 160};
const int J4_pos[3] = {0, 95, 180};
const int J5_pos[3] = {0, 85, 180};
const int J6_pos[3] = {0, 78, 180};

const int time_step = 50; 
////Move 1
//int jointQ_1[] = {0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,2,2,2,2,3,3,3,4,4,5,5,5,6,6,7,7,8,8,9,10,10,11,11,12,13,13,14,15,15,16,17,17,18,19,19,20,21,21,22,23,23,24,25,25,26,26,27,28,28,29,29,30,30,31,31,31,32,32,33,33,33,34,34,34,34,35,35,35,35,35,35,36,36,36,36,36,36,36,36,36,36,36,36};
//int jointQ_2[] = {-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-1,-1,-1,-1,-1,-1,-2,-2,-2,-2,-3,-3,-3,-3,-4,-4,-5,-5,-5,-6,-6,-7,-7,-8,-8,-9,-9,-10,-10,-11,-11,-12,-12,-13,-13,-14,-14,-15,-16,-16,-17,-17,-18,-18,-19,-19,-20,-20,-21,-21,-22,-22,-23,-23,-24,-24,-25,-25,-25,-26,-26,-27,-27,-27,-27,-28,-28,-28,-28,-29,-29,-29,-29,-29,-29,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30};
//int jointQ_3[] = {0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,2,2,2,2,3,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,12,12,13,14,14,15,16,16,17,18,18,19,20,21,21,22,23,23,24,25,25,26,27,27,28,28,29,29,30,30,31,31,32,32,33,33,34,34,34,35,35,35,35,36,36,36,36,36,36,37,37,37,37,37,37,37,37,37,37,37,37};
//int jointQ_4[] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
//int jointQ_5[] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
//int jointQ_6[] = {0,0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,3,3,4,4,5,5,6,7,7,8,9,10,11,11,12,13,14,15,16,18,19,20,21,22,23,25,26,27,28,30,31,32,34,35,36,38,39,40,42,43,44,45,47,48,49,50,51,52,54,55,56,57,58,59,59,60,61,62,63,63,64,65,65,66,66,67,67,68,68,68,69,69,69,69,70,70,70,70,70,70,70,70,70,70};

////Move 2
//int jointQ_1[] = {36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36};
//int jointQ_2[] = {-30,-30,-30,-29,-28,-27,-26,-24,-23,-21,-19,-18,-16,-15,-14,-13,-12,-12,-12,-12};
//int jointQ_3[] = {37,37,37,36,36,35,34,33,31,30,29,27,26,25,24,24,23,23,23,23};
//int jointQ_4[] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
//int jointQ_5[] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
//int jointQ_6[] = {70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70};

////Move 3
//int jointQ_1[] = {36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36};
//int jointQ_2[] = {-12,-12,-12,-13,-14,-15,-16,-18,-19,-21,-23,-24,-26,-27,-28,-29,-29,-30,-30,-30};
//int jointQ_3[] = {23,23,23,24,24,25,26,27,29,30,31,33,34,35,36,36,37,37,37,37};
//int jointQ_4[] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
//int jointQ_5[] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
//int jointQ_6[] = {70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70};

//Total trajectory
int jointQ_1[] = {0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,2,2,2,2,3,3,3,4,4,5,5,5,6,6,7,7,8,8,9,10,10,11,11,12,13,13,14,15,15,16,17,17,18,19,19,20,21,21,22,23,23,24,25,25,26,26,27,28,28,29,29,30,30,31,31,31,32,32,33,33,33,34,34,34,34,35,35,35,35,35,35,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36};
int jointQ_2[] = {-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-1,-1,-1,-1,-1,-1,-2,-2,-2,-2,-3,-3,-3,-3,-4,-4,-5,-5,-5,-6,-6,-7,-7,-8,-8,-9,-9,-10,-10,-11,-11,-12,-12,-13,-13,-14,-14,-15,-16,-16,-17,-17,-18,-18,-19,-19,-20,-20,-21,-21,-22,-22,-23,-23,-24,-24,-25,-25,-25,-26,-26,-27,-27,-27,-27,-28,-28,-28,-28,-29,-29,-29,-29,-29,-29,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-29,-28,-27,-26,-24,-23,-21,-19,-18,-16,-15,-14,-13,-12,-12,-12,-12, -12,-12,-12,-13,-14,-15,-16,-18,-19,-21,-23,-24,-26,-27,-28,-29,-29,-30,-30,-30};
int jointQ_3[] = {0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,2,2,2,2,3,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,12,12,13,14,14,15,16,16,17,18,18,19,20,21,21,22,23,23,24,25,25,26,27,27,28,28,29,29,30,30,31,31,32,32,33,33,34,34,34,35,35,35,35,36,36,36,36,36,36,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,36,36,35,34,33,31,30,29,27,26,25,24,24,23,23,23,23,23,23,23,24,24,25,26,27,29,30,31,33,34,35,36,36,37,37,37,37};
int jointQ_4[] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
int jointQ_5[] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
int jointQ_6[] = {0,0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,3,3,4,4,5,5,6,7,7,8,9,10,11,11,12,13,14,15,16,18,19,20,21,22,23,25,26,27,28,30,31,32,34,35,36,38,39,40,42,43,44,45,47,48,49,50,51,52,54,55,56,57,58,59,59,60,61,62,63,63,64,65,65,66,66,67,67,68,68,68,69,69,69,69,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70};


void setup() {
  // put your setup code here, to run once:
  J1.attach(J1_pin);
  J2.attach(J2_pin);
  J3.attach(J3_pin);
  J4.attach(J4_pin);
  J5.attach(J5_pin);
  J6.attach(J6_pin);
  Serial.begin(9600);
}

void loop() {
  int num_elements = sizeof(jointQ_1) / sizeof(jointQ_1[0]);
  for (int jj = 0; jj < num_elements; jj++) {
    J1.write(min(max(J1_pos[0], (jointQ_1[jj] + J1_pos[1])), J1_pos[2]));
    J2.write(min(max(J2_pos[0], (jointQ_2[jj] + J2_pos[1])), J2_pos[2]));
    J3.write(min(max(J3_pos[0], (jointQ_3[jj] + J3_pos[1])), J3_pos[2]));
    J4.write(min(max(J4_pos[0], (jointQ_4[jj] + J4_pos[1])), J4_pos[2]));
    J5.write(min(max(J5_pos[0], (-jointQ_5[jj] + J5_pos[1])), J5_pos[2]));
    J6.write(min(max(J6_pos[0], (jointQ_6[jj] + J6_pos[1])), J6_pos[2]));
    delay(time_step);
  }
  while (true) {}
}

//int jointQ_1[] = {};
//int jointQ_2[] = {};
//int jointQ_3[] = {};
//int jointQ_4[] = {};
//int jointQ_5[] = {};
//int jointQ_6[] = {};
